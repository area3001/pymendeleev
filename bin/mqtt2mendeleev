#!/usr/bin/env python3
import argparse
import asyncio
import logging
import os
import sys

import asyncio_mqtt as aiomqtt
from mendeleev.mendeleev_serial import MendeleevSerial
from scapy.packet import NoPayload

logger = logging.getLogger(__name__)

NUM_ELEMENTS = 118
CLIENT_ID = "mqtt2mendeleev_bridge"

def update():
    logger.info("update")
    os.system("/bin/sh /usr/bin/update.sh 1")

def sensor_test():
    logger.info("sensor test")

class TopicException(Exception):
    pass

class MendeleevBridge:
    def __init__(self, device, broker, prefix, timeout, broadcasttimeout):
        self.broker = broker
        self.serial = MendeleevSerial(device)
        self.prefix = prefix
        self.timeout = timeout
        self.broadcasttimeout = broadcasttimeout

    async def process_msg(self, msg):
        splitted_topic = msg.topic.value.split("/")

        if len(splitted_topic) != 3:
            raise TopicException("topic format is not correct: %s" % (msg.topic.value))

        try:
            element = int(splitted_topic[1])
        except ValueError as e:
            raise TopicException("element index %s is not valid" % (splitted_topic[1]))

        cmd = splitted_topic[2]

        if ((element < 0) or (element > NUM_ELEMENTS)) and (element != 0xFF):
            raise TopicException("element %d not valid" % (element))

        if element == 0:
            if cmd == "update":
                update()
            elif cmd == "sensortest":
                sensor_test()
            else:
                raise TopicException("command %s is not valid for master" % (cmd))
        elif element == 0xFF:
            logger.debug("Broadcasting command %s", cmd)
            if cmd == "ota":
                await self.serial.broadcast_ota(msg.payload, self.broadcasttimeout)
            else:
                await self.serial.broadcast_cmd(cmd, msg.payload, self.broadcasttimeout)
        else:
            logger.debug("Send command %s to %d...", cmd, element)
            if cmd == "ota":
                await self.serial.send_ota(element, msg.payload, self.timeout)
            else:
                response = await self.serial.send_cmd(element, cmd, msg.payload, self.timeout)
                if not isinstance(response, NoPayload):
                    logger.debug("reponse for command %s to %d: %s", cmd, element, response.show(dump=True))
                    return response

    async def main(self):
        await self.serial.connect()
        reconnect_interval = 5  # In seconds
        while True:
            try:
                async with aiomqtt.Client(self.broker, client_id=CLIENT_ID) as client:
                    async with client.messages() as messages:
                        await client.subscribe(self.prefix + "/+/+")
                        async for msg in messages:
                            try:
                                result = await self.process_msg(msg)
                                if result:
                                    result = result.load.decode("utf-8")
                                await client.publish(msg.topic.value + "/ack", result, qos=1)
                            except asyncio.TimeoutError:
                                logger.warning("timeout waiting for response for %s", msg.topic)
                                await client.publish(msg.topic.value + "/nack", qos=1)
                            except TopicException as te:
                                logger.error("Invalid MQTT request")
                                logger.exception(te)
                                await client.publish(msg.topic.value + "/nack", qos=1)
                            except Exception as e:
                                logger.error("error when processing %s", msg.topic.value)
                                logger.exception(e)
                                await client.publish(msg.topic.value + "/nack", qos=1)
            except aiomqtt.MqttError as error:
                print(f'Error "{error}". Reconnecting in {reconnect_interval} seconds.')
                await asyncio.sleep(reconnect_interval)

def main(argv):
    parser = argparse.ArgumentParser(description="Set up Mendeleev MQTT bridge")
    parser.add_argument("-d", "--device", required=True, help="The RS485 tty device")
    parser.add_argument("-b", "--broker", default="localhost", help="The MQTT broker")
    parser.add_argument("-p", "--prefix", default="mendeleev", help="The MQTT topic prefix")
    parser.add_argument("-t", "--timeout", type=int, default=1, help="The timeout to wait for responses")
    parser.add_argument("-w", "--broadcastwait", type=int, default=.5, help="The time to wait between broadcast messages")
    parser.add_argument("-l", "--log", default="INFO", dest="logLevel", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"], help="Set the logging level")
    parser.add_argument("-f", "--logfile", default=None, help="set logfile")

    args = parser.parse_args(argv)

    logging.basicConfig(level=logging.getLevelName(args.logLevel), filename=args.logfile, format="%(asctime)s - %(levelname)-8s - %(message)s")

    logger.info("Starting on %s and %s with prefix %s", args.device, args.broker, args.prefix)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(MendeleevBridge(args.device, args.broker, args.prefix, args.timeout, args.broadcastwait).main())
    loop.close()
    logger.info("Finished")

if __name__ == "__main__":
    main(sys.argv[1:])
