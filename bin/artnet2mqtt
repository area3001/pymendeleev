#!/usr/bin/env python3
import argparse
import asyncio
import logging
import socket
import sys

import asyncio_mqtt as aiomqtt

from mendeleev.layers.artnet import ArtNet, ArtNet_DMX

logger = logging.getLogger(__name__)

CLIENT_ID = "artnet2mqtt_bridge"
CHANNELS_PER_ELEMENT = 7
ELEMENTS = 118
MAX_UNIVERSE = 512
MAX_ELEMENTS_PER_UNIVERSE = MAX_UNIVERSE // CHANNELS_PER_ELEMENT
PORT = 6454

class ArtnetProtocol(asyncio.DatagramProtocol):
    def __init__(self, client, prefix, on_con_lost):
        super().__init__()
        self.client = client
        self.prefix = prefix
        self.on_con_lost = on_con_lost
        self.transport = None
        self.cache = {
            0: b"\x00" * MAX_UNIVERSE,
            1: b"\x00" * MAX_UNIVERSE,
            2: b"\x00" * MAX_UNIVERSE,
            3: b"\x00" * MAX_UNIVERSE,
        }

    def connection_made(self, transport):
        logger.debug("connection made")
        self.transport = transport

    async def process_dmx_msg(self, pkt):
        dmx_pkt = pkt[ArtNet_DMX]
        universe = dmx_pkt.universe
        if dmx_pkt.data_length is None or dmx_pkt.data_length != MAX_UNIVERSE:
            logger.warning("data length not correct")
            logger.warning(dmx_pkt.show2(dump=True))
            return
        new_data = dmx_pkt.payload.load
        old_data = self.cache[universe]
        self.cache[universe] = new_data

        start = (universe * MAX_ELEMENTS_PER_UNIVERSE * CHANNELS_PER_ELEMENT) + CHANNELS_PER_ELEMENT
        end = min(((universe + 1) * MAX_ELEMENTS_PER_UNIVERSE * CHANNELS_PER_ELEMENT) + 1, ((ELEMENTS * CHANNELS_PER_ELEMENT) + 1))

        for i in range(start, end, CHANNELS_PER_ELEMENT):
            element = i // CHANNELS_PER_ELEMENT
            new_element_data, new_data = new_data[:CHANNELS_PER_ELEMENT], new_data[CHANNELS_PER_ELEMENT:]
            old_element_data, old_data = old_data[:CHANNELS_PER_ELEMENT], old_data[CHANNELS_PER_ELEMENT:]
            if new_element_data != old_element_data:
                topic = f"{self.prefix}/{element}/setcolor"
                logger.debug("updating color of element %d: %s" % (element, new_element_data.hex()))
                try:
                    await self.client.publish(topic, payload=new_element_data)
                except aiomqtt.MqttError:
                    print("mqtt connection failed")
                    self.transport.close()

    def datagram_received(self, data, addr):
        try:
            pkt = ArtNet(data)
            if pkt.haslayer(ArtNet_DMX):
                asyncio.ensure_future(self.process_dmx_msg(pkt))
        except Exception as e:
            logger.error("Invalid packet received:")
            logger.exception(e)

    def error_received(self, exc):
        print('Error received:', exc)

    def connection_lost(self, exc):
        print("artnet connection closed:", exc)
        self.on_con_lost.set_result(True)

async def artnetbridge(loop, iface, broker, prefix):
    reconnect_interval = 5  # In seconds
    while True:
        on_con_lost = loop.create_future()
        try:
            async with aiomqtt.Client(broker, client_id=CLIENT_ID) as client:
                with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                    sock.bind(("", PORT))
                    transport, _ = await loop.create_datagram_endpoint(lambda: ArtnetProtocol(client, prefix, on_con_lost), sock=sock)
                    await on_con_lost
                    transport.close()
        except aiomqtt.MqttError as error:
            print(f'Error "{error}". Reconnecting in {reconnect_interval} seconds.')
            await asyncio.sleep(reconnect_interval)

def main(argv):
    parser = argparse.ArgumentParser(description="Set up Artnet to MQTT bridge")
    parser.add_argument("-i", "--iface", default=None, help="The network interface to listen on (default: all interfaces)")
    parser.add_argument("-b", "--broker", default="localhost", help="The MQTT broker")
    parser.add_argument("-p", "--prefix", default="mendeleev", help="The MQTT topic prefix")
    parser.add_argument("-l", "--log", default="INFO", dest="logLevel", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"], help="Set the logging level")
    parser.add_argument("-f", "--logfile", default=None, help="set logfile")

    args = parser.parse_args(argv)

    logging.basicConfig(level=logging.getLevelName(args.logLevel), filename=args.logfile, format="%(asctime)s - %(levelname)-8s - %(message)s")

    logger.info("Start listening and %s with prefix %s", args.broker, args.prefix)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(artnetbridge(loop, args.iface, args.broker, args.prefix))
    loop.close()
    logger.info("Finished")

if __name__ == "__main__":
    main(sys.argv[1:])
