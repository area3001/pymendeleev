from scapy.packet import Packet
from scapy.fields import *

ELEMENTS = {
       0: "Master",
       1: "ELEMENT_H",  # Hydrogen
       2: "ELEMENT_He", # Helium
       3: "ELEMENT_Li", # Lithium
       4: "ELEMENT_Be", # Beryllium
       5: "ELEMENT_B",  # Boron
       6: "ELEMENT_C",  # Carbon
       7: "ELEMENT_N",  # Nitrogen
       8: "ELEMENT_O",  # Oxygen
       9: "ELEMENT_F",  # Fluorine
      10: "ELEMENT_Ne", # Neon
      11: "ELEMENT_Na", # Sodium
      12: "ELEMENT_Mg", # Magnesium
      13: "ELEMENT_Al", # Aluminum
      14: "ELEMENT_Si", # Silicon
      15: "ELEMENT_P",  # Phosphorus
      16: "ELEMENT_S",  # Sulfur
      17: "ELEMENT_Cl", # Chlorine
      18: "ELEMENT_Ar", # Argon
      19: "ELEMENT_K",  # Potassium
      20: "ELEMENT_Ca", # Calcium
      21: "ELEMENT_Sc", # Scandium
      22: "ELEMENT_Ti", # Titanium
      23: "ELEMENT_V",  # Vanadium
      24: "ELEMENT_Cr", # Chromium
      25: "ELEMENT_Mn", # Manganese
      26: "ELEMENT_Fe", # Iron
      27: "ELEMENT_Co", # Cobalt
      28: "ELEMENT_Ni", # Nickel
      29: "ELEMENT_Cu", # Copper
      30: "ELEMENT_Zn", # Zinc
      31: "ELEMENT_Ga", # Gallium
      32: "ELEMENT_Ge", # Germanium
      33: "ELEMENT_As", # Arsenic
      34: "ELEMENT_Se", # Selenium
      35: "ELEMENT_Br", # Bromine
      36: "ELEMENT_Kr", # Krypton
      37: "ELEMENT_Rb", # Rubidium
      38: "ELEMENT_Sr", # Strontium
      39: "ELEMENT_Y",  # Yttrium
      40: "ELEMENT_Zr", # Zirconium
      41: "ELEMENT_Nb", # Niobium
      42: "ELEMENT_Mo", # Molybdenum
      43: "ELEMENT_Tc", # Technetium
      44: "ELEMENT_Ru", # Ruthenium
      45: "ELEMENT_Rh", # Rhodium
      46: "ELEMENT_Pd", # Palladium
      47: "ELEMENT_Ag", # Silver
      48: "ELEMENT_Cd", # Cadmium
      49: "ELEMENT_In", # Indium
      50: "ELEMENT_Sn", # Tin
      51: "ELEMENT_Sb", # Antimony
      52: "ELEMENT_Te", # Tellurium
      53: "ELEMENT_I",  # Iodine
      54: "ELEMENT_Xe", # Xenon
      55: "ELEMENT_Cs", # Cesium
      56: "ELEMENT_Ba", # Barium
      57: "ELEMENT_La", # Lanthanum
      58: "ELEMENT_Ce", # Cerium
      59: "ELEMENT_Pr", # Praseodymium
      60: "ELEMENT_Nd", # Neodymium
      61: "ELEMENT_Pm", # Promethium
      62: "ELEMENT_Sm", # Samarium
      63: "ELEMENT_Eu", # Europium
      64: "ELEMENT_Gd", # Gadolinium
      65: "ELEMENT_Tb", # Terbium
      66: "ELEMENT_Dy", # Dysprosium
      67: "ELEMENT_Ho", # Holmium
      68: "ELEMENT_Er", # Erbium
      69: "ELEMENT_Tm", # Thulium
      70: "ELEMENT_Yb", # Ytterbium
      71: "ELEMENT_Lu", # Lutetium
      72: "ELEMENT_Hf", # Hafnium
      73: "ELEMENT_Ta", # Tantalum
      74: "ELEMENT_W",  # Tungsten
      75: "ELEMENT_Re", # Rhenium
      76: "ELEMENT_Os", # Osmium
      77: "ELEMENT_Ir", # Iridium
      78: "ELEMENT_Pt", # Platinum
      79: "ELEMENT_Au", # Gold
      80: "ELEMENT_Hg", # Mercury
      81: "ELEMENT_Tl", # Thallium
      82: "ELEMENT_Pb", # Lead
      83: "ELEMENT_Bi", # Bismuth
      84: "ELEMENT_Po", # Polonium
      85: "ELEMENT_At", # Astatine
      86: "ELEMENT_Rn", # Radon
      87: "ELEMENT_Fr", # Francium
      88: "ELEMENT_Ra", # Radium
      89: "ELEMENT_Ac", # Actinium
      90: "ELEMENT_Th", # Thorium
      91: "ELEMENT_Pa", # Protactinium
      92: "ELEMENT_U",  # Uranium
      93: "ELEMENT_Np", # Neptunium
      94: "ELEMENT_Pu", # Plutonium
      95: "ELEMENT_Am", # Americium
      96: "ELEMENT_Cm", # Curium
      97: "ELEMENT_Bk", # Berkelium
      98: "ELEMENT_Cf", # Californium
      99: "ELEMENT_Es", # Einsteinium
     100: "ELEMENT_Fm", # Fermium
     101: "ELEMENT_Md", # Mendelevium
     102: "ELEMENT_No", # Nobelium
     103: "ELEMENT_Lr", # Lawrencium
     104: "ELEMENT_Rf", # Rutherfordium
     105: "ELEMENT_Db", # Dubnium
     106: "ELEMENT_Sg", # Seaborgium
     107: "ELEMENT_Bh", # Bohrium
     108: "ELEMENT_Hs", # Hassium
     109: "ELEMENT_Mt", # Meitnerium
     110: "ELEMENT_Ds", # Darmstadtium
     111: "ELEMENT_Rg", # Roentgenium
     112: "ELEMENT_Cp", # Copernicium
     113: "ELEMENT_Nh", # Nihonium
     114: "ELEMENT_Fl", # Flerovium
     115: "ELEMENT_Mc", # Moscovium
     116: "ELEMENT_Lv", # Livermorium
     117: "ELEMENT_Ts", # Tennessine
     118: "ELEMENT_Og", # Oganesson
     255: "Broadcast"
}

COMMANDS = {
    0x00: "setcolor",
    0x01: "setmode",
    0x02: "ota",
    0x03: "version",
    0x04: "setoutput",
    0x05: "reboot",
    0x06: "setup"
}

MODES = {
    0x00: "ota",
    0x01: "guest",
    0x02: "teacher",
    0x03: "setup"
}

table_crc_hi = [
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
]

table_crc_lo = [
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
    0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
    0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
    0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
    0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
    0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
    0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
    0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
    0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
    0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
    0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
    0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
    0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
    0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
]

class MendeleevHeader(Packet):
    name = 'Mendeleev header'
    fields_desc = [
        ByteEnumField("destination", 0xFF, ELEMENTS),
        ByteEnumField("source", 0, ELEMENTS),
        ShortField("sequence_nr", None),
        ByteEnumField("cmd", 0, COMMANDS),
        ShortField("length", None),
        XShortField("crc", None)
    ]

    @staticmethod
    def compute_crc16(data):
        data = bytearray(data)
        crc_hi = 0xFF
        crc_lo = 0xFF

        for d in data:
            i = crc_hi ^ d
            crc_hi = crc_lo ^ table_crc_hi[i]
            crc_lo = table_crc_lo[i]

        return (crc_hi << 8 | crc_lo)

    def post_build(self, p, pay):
        # Switch payload and crc
        length = p[5:7] if self.length is not None else struct.pack('>H', len(pay))
        crc = p[-2:]
        p = p[:5] + length + pay
        p += crc if self.crc is not None else struct.pack('>H', self.compute_crc16(p))
        return p

    def post_dissect(self, s):
        self.raw_packet_cache = None  # Reset packet to allow post_build
        return s

    def pre_dissect(self, s):
        # Switch payload and crc
        length = struct.unpack('>H', s[5:7])[0]
        data, s = s[:length+9], s[length+9:]
        crc = struct.unpack('>H', data[-2:])[0]
        calc_crc = self.compute_crc16(data[:-2])
        if crc != calc_crc:
            raise Scapy_Exception("Wrong checksum: %04x != %04x" % (crc, calc_crc))
        return data[:7] + data[-2:] + data[7:-2] + s

    def answers(self, other):
        if (self.destination == other.source) and \
           ((self.cmd == other.cmd) or ((~self.cmd & 0xFF) == other.cmd)) and \
           (self.sequence_nr == other.sequence_nr):
            return 1
        return 0
